import random
from ps10pr3 import * # to use the connect_four and process_move functions

class AIPlayer(Player):
    
    def __init__(self, checker, tiebreak, lookahead):
        """ constructs a new AIPlayer object and initialize the two attributes that are not inherited from Player
        """
        assert(checker == 'X' or checker == 'O')
        assert(tiebreak == 'LEFT' or tiebreak == 'RIGHT' or tiebreak == 'RANDOM')
        assert(lookahead >= 0)
        
        Player.__init__(self, checker)
        
        self.tiebreak = tiebreak
        self.lookahead = lookahead
    
    
    def __repr__(self):
        """ return a string representing an AIPlayer object
            override/replace the __repr__ method that is inherited from Player
            indicate the player’s tiebreaking strategy and lookahead
        """
        s = 'Player ' + str(self.checker) + ' (' + str(self.tiebreak) + ', ' + str(self.lookahead) + ')'
        return s
    
    
    def max_score_column(self, scores):
        """ takes a list scores containing a score for each column of the board, and that returns the index of the column with the maximum score
        """
        scores_index = []
        for i in range(len(scores)):
            if scores[i] == max(scores):
                scores_index += [i]
        if self.tiebreak == 'LEFT':
            return scores_index[0]
        if self.tiebreak == 'RIGHT':
            return scores_index[-1]
        if self.tiebreak == 'RANDOM':
            return random.choice(scores_index)
        
    
    
    def scores_for(self, board):
        """ takes a Board object board and determines the called AIPlayer‘s scores for the columns in board
        """
        scores = [50] * board.width
        
        for col in range(board.width):
            if board.can_add_to(col) == False:
                scores[col] = -1
            if board.is_win_for(self.opponent_checker()) == True:
                scores[col] = 0
            if board.is_win_for(self.checker) == True:
                scores[col] = 100
            if self.lookahead == 0:
                scores[col] = 50
            else:
                board.add_checker(self.checker, col)
                oppo = AIPlayer(self.opponent_checker(), self.tiebreak, self.lookahead - 1)
                oppo_scores = oppo.scores_for(board)
                if max(oppo_scores) == 0:
                    scores[col] = 100
                if max(oppo_scores) == 50:
                    scores[col] = 50
                if max(oppo_scores) == 100:
                    scores[col] = 0
                board.remove_checker(col)
            
        return scores
    
    
    
    def next_move(self, board):
        """ overrides the next_move method that is inherited from Player
        """
        next = self.max_score_column(self.scores_for(board))
        self.num_moves += 1
        return next
