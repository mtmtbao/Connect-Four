
class Board:
    
    def __init__(self, height, width):
        """ Constructs a new Board object by initializing attributes
        """
        self.height = height
        self.width = width
        self.slots = [[' '] * self.width for row in range(self.height)]
    
    
    
    def __repr__(self):
        """ Returns a string representing a Board object.
        """
        s = ''
        
        for row in range(self.height):
            s += '|'
            for col in range(self.width):
                s += self.slots[row][col] + '|'
            s += '\n'
            
        num_hyphen = 2 * self.width + 1
        s += '-' * num_hyphen
        s += '\n'
        
        for col in range(self.width):
            num = col % 10
            s += ' ' + str(num)
        s += '\n'
        
        return s
        
    
    
    def add_checker(self, checker, col):
        """ Add checker to the column
        """
        assert(checker == 'X' or checker == 'O')
        assert(0 <= col < self.width)
        
        row = 0
        while self.slots[row][col] == ' ':
            if row >= (self.height - 1):
                row += 1
                break
            else:
                row += 1
        
        self.slots[row - 1][col] = checker
        
    
    
    def reset(self):
        """ Reset the Board object on which it is called by setting all slots to contain a space character
        """
        self.slots = [[' '] * self.width for row in range(self.height)] # method 1
        
        # method 2
        # for row in range(self.height):
        #     for col in range(self.width):
        #         self.slots[row][col] = ' '
        
        
        
    def add_checkers(self, colnums):
        """ takes in a string of column numbers and places alternating
            checkers in those columns of the called Board object, 
            starting with 'X'.
        """
        checker = 'X'   # start by playing 'X'
    
        for col_str in colnums:
            col = int(col_str)
            if 0 <= col < self.width:
                self.add_checker(checker, col)
    
            # switch to the other checker
            if checker == 'X':
                checker = 'O'
            else:
                checker = 'X'
    
    
    
    def can_add_to(self, col):
        """ Returns True if it is valid to place a checker in the column col on the calling Board object.
            Otherwise, return False
        """
        if 0 <= col <= self.width:
            if self.slots[0][col] == ' ':
                return True
            else:
                return False
        else:
            return False
            
    
    
    def is_full(self):
        """ Returns True if the called Board object is completely full of checkers, and returns False otherwise
        """
        result = 0
        for col in range(self.width):
            if self.can_add_to(col):
                result += 1
            else:
                result = 0
        if result != 0:
            return False
        else:
            return True
        
    
    
    def remove_checker(self, col):
        """ Removes the top checker from column col of the called Board object. If the column is empty, then the method should do nothing.
        """
        found = 0
        for row in range(self.height):
            if self.slots[row][col] != ' ' and found == 0:
                self.slots[row][col] = ' '
                found = 1
                    
    
    
    def is_horizontal_win(self, checker):
        """ Checks for a horizontal win for the specified checker.
        """
        for row in range(self.height):
            for col in range(self.width - 3):
                # Check if the next four columns in this row
                # contain the specified checker.
                if self.slots[row][col] == checker and \
                   self.slots[row][col + 1] == checker and \
                   self.slots[row][col + 2] == checker and \
                   self.slots[row][col + 3] == checker:
                    return True

    # if we make it here, there were no horizontal wins
        return False

    
    def is_vertical_win(self, checker):
        """ Checks for a vertical win for the specified checker.
        """
        for row in range(self.height - 3):
            for col in range(self.width):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col] == checker and \
                   self.slots[row + 2][col] == checker and \
                   self.slots[row + 3][col] == checker:
                    return True
              
        return False
    
    
    
    def is_down_diagonal_win(self, checker):
        """ Checks for a down diagonal win that go down from left to right for the specified checker.
        """
        for row in range(self.height - 3):
            for col in range(self.width - 3):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col + 1] == checker and \
                   self.slots[row + 2][col + 2] == checker and \
                   self.slots[row + 3][col + 3] == checker:
                     return True
        return False
    
    
    
    def is_down_diagonal_win(self, checker):
        """ Checks for a down diagonal win that goes down from left to right for the specified checker.
        """
        for row in range(self.height - 3):
            for col in range(self.width - 3):
                if self.slots[row][col] == checker and \
                   self.slots[row + 1][col + 1] == checker and \
                   self.slots[row + 2][col + 2] == checker and \
                   self.slots[row + 3][col + 3] == checker:
                     return True
        return False
    
    
    
    def is_up_diagonal_win(self, checker):
        """ Checks for a up diagonal win that that goes up from left to right for the specified checker.
        """
        for row in range(3, self.height):
            for col in range(self.width - 3):
                if self.slots[row][col] == checker and \
                   self.slots[row - 1][col + 1] == checker and \
                   self.slots[row - 2][col + 2] == checker and \
                   self.slots[row - 3][col + 3] == checker:
                     return True
        return False
    
    
    
    def is_win_for(self, checker):
        """ Accepts a parameter checker that is either 'X' or 'O', and returns True if there are four consecutive slots containing checker on the board. 
            Otherwise, it should return False.
        """
        assert(checker == 'X' or checker == 'O')
        
        if self.is_horizontal_win(checker) == True or\
            self.is_vertical_win(checker) == True or\
            self.is_down_diagonal_win(checker) == True or\
            self.is_up_diagonal_win(checker) == True:
            return True
        else:
            return False
    
